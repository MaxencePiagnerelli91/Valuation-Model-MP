import yfinance as yf
import time
time.sleep(2)


Ticker = input("Entrer le ticker d'une action : ").strip().upper()
Discount_Rate = float(input("Taux d'actualisation (%) : ")) / 100
Growth_Rate = float(input("Taux de croissance (%) : ")) / 100
Thestock = yf.Ticker(Ticker)
dividends = Thestock.dividends # récupère TOUS les dividendes


def No_Erreur (Discount_Rate, Growth_Rate): 
    if Growth_Rate >= Discount_Rate :
       raise ValueError("Erreur : le taux de croissance doit être inferieur au taux d'actualisation.")

def discounted_dividend_model(dividend, Growth_Rate, Discount_Rate) :
    Year0 = dividend
    Year1 = (Year0 * (1 + Growth_Rate)) / (1+Discount_Rate)
    Year2 = (Year1 * (1 + Growth_Rate)) / (1+Discount_Rate)
    Year3 = (Year2 * (1 + Growth_Rate)) / (1+Discount_Rate)
    Year4 = (Year3 * (1 + Growth_Rate)) / (1+Discount_Rate)
    Year5 = (Year4 * (1 + Growth_Rate)) / (1+Discount_Rate)
    TV = (Year5 * (1 + Growth_Rate) )/ (Discount_Rate - Growth_Rate)
    return TV

def stock_price (Ticker):
    try:
        stock = yf.Ticker(Ticker)
        Current_Price = stock.history(period="1d")['Close'].iloc[-1] 
        return Current_Price
    except:
        print("Erreur de récuperation des données")

def PE_Ratio (Ticker) :
    s_price = stock_price(Ticker)
    eps = s_price.info.get("trailingEps")
    forward_eps = s_price.info.get("forwardEps") 

    Actual_PE = s_price/eps
    Forward_PE = s_price/forward_eps

    print ("L'actuel PE Ratio est de" + str(Actual_PE) + "et le PE ratio futur est estimé à" + str(Forward_PE))

def Inv_recommendation (Int_Value, Current_Price):
    if Current_Price < Int_Value * 0.9:  
        return "Buy"
    elif Current_Price > Int_Value * 1.1:  
        return "Sell"
    else:  
        return "Hold"
 
try:
        if dividends.empty:  
            print("Erreur : cette action ne verse pas de dividendes.")
        else:
            No_Erreur(Discount_Rate, Growth_Rate)
            dividends_per_year = dividends.resample('YE').sum()  # Somme des dividendes par année
            last_annual_dividend = dividends_per_year.iloc[-1] #prends le dernier qui sert de base
            print("Le dernier dividende annuel est de : " + str(last_annual_dividend) + "€")
            Int_Value = discounted_dividend_model(last_annual_dividend, Growth_Rate, Discount_Rate) 
            
            print("La valeur intrinsèque de l'action est : " + str(Int_Value) + "€")

            Price = stock_price(Ticker)
            if Price is not None:
                print("Cours actuel de l'action : " + str(Price) + "€")
                recommendation = Inv_recommendation(Int_Value, Price)
                print("Recommandation : " + str(recommendation))
                print(str(PE_ratio(Ticker)))
                
except:
        print("Erreur de calcul DDM")


