import yfinance as yf

Ticker = input("Entrer le ticker d'une action : ").strip().upper()
Discount_Rate = float(input("Taux d'actualisation (%) : ")) / 100
Growth_Rate = float(input("Taux de croissance (%) : ")) / 100
Thestock = yf.Ticker(Ticker)



def No_Erreur (Discount_Rate, Growth_Rate): 
    if Growth_Rate >= Discount_Rate :
       raise ValueError("Erreur : le taux de croissance doit être inferieur au taux d'actualisation.")

def discounted_dividend_model(dividend, Growth_Rate, Discount_Rate) :
    Year0 = dividend
    Year1 = (Year0 * (1 + Growth_Rate)) / (1+Discount_Rate)
    Year2 = (Year1 * (1 + Growth_Rate)) / (1+Discount_Rate)
    Year3 = (Year2 * (1 + Growth_Rate)) / (1+Discount_Rate)
    Year4 = (Year3 * (1 + Growth_Rate)) / (1+Discount_Rate)
    Year5 = (Year4 * (1 + Growth_Rate)) / (1+Discount_Rate)
    D6 = Year5 * (1 + Growth_Rate)  
    TV = D6 / (Discount_Rate - Growth_Rate)  
    TV_discounted = TV / (1 + Discount_Rate) ** 5
    Sum = Year1 + Year2 + Year3 + Year4 + Year5 + TV_discounted
    return Sum

def stock_price (Ticker):
    try:
        stock = yf.Ticker(Ticker)
        Current_Price = stock.history(period="1d")['Close'].iloc[-1] 
        return Current_Price
    except:
        print("Erreur de récuperation des données")

def PE_Ratio (Ticker) :
    s_price = yf.Ticker(Ticker)
    eps = s_price.info.get("trailingEps")

    if eps > 0 :
        return stock_price(Ticker)/eps
    else :
        return "EPS indispo ou négatif"

def Inv_recommendation (Int_Value, Current_Price):
    if Current_Price < Int_Value * 0.9:  
        return "Buy"
    elif Current_Price > Int_Value * 1.1:  
        return "Sell"
    else:  
        return "Hold"
 
try:
    No_Erreur(Discount_Rate, Growth_Rate)
    last_annual_dividend = Thestock.info.get("dividendRate")#prends le dernier qui sert de base

    if last_annual_dividend is None or last_annual_dividend == 0:
        print("l'action ne verse pas de dividende")

    else : 
            print("Le dernier dividende annuel est de : " + str(last_annual_dividend) + "€")
            Int_Value = discounted_dividend_model(last_annual_dividend, Growth_Rate, Discount_Rate) 
            print("La valeur intrinsèque de l'action est : " + str(Int_Value) + "€")
            Price = stock_price(Ticker)
            if Price is not None:
                print("Cours actuel de l'action : " + str(Price) + "€")
                PE_R = PE_Ratio (Ticker)
                print("Le PE Ratio est de :"+str(PE_R))
                recommendation = Inv_recommendation(Int_Value, Price)
                print("Recommandation : " + str(recommendation))
                
except:
        print("erreur : le taux d'actualisation n'est pas supérieur au taux de croissance")
        


